1st experiment


import java.util.*;
public class Main
{
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        int n=s.length();
        if(s.charAt(n-1)=='c' && s.charAt(n-2)=='b' && s.charAt(n-3)=='a'){
            System.out.println("String is Accepted");
        }else{
            System.out.println("String is not Accepted");
        }
    }
}  


2nd experiment


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the java program:");
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] tokens = line.split("\\s+");

            for (String token : tokens) {
                if (isNumber(token)) {
                    System.out.println(token + " is a number");
                } else if (isKeyword(token)) {
                    System.out.println(token + " is a keyword");
                } else if (isIdentifier(token)) {
                    System.out.println(token + " is an identifier");
                }else if(isOperator(token)){
                    System.out.println(token+ " is an operator");
                }
               
                else {
                    System.out.println(token + " is a special symbol");
                }
            }

        }
        scanner.close();
    }

    private static boolean isNumber(String token) {
        try {
            Integer.parseInt(token);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static boolean isKeyword(String token) {
        String[] keywords = {"for", "while", "do", "int", "float", "char", "double", "static", "switch", "case"};
        for (String keyword : keywords) {
            if (token.equals(keyword)) {
                return true;
            }
        }
        return false;
    }

    private static boolean isIdentifier(String token) {
        return token.matches("[a-zA-Z_$][a-zA-Z0-9_$]*");
    }
    private static boolean isOperator(String token){
        String[] operators={"+","-","*","%","/",">","<","="};
        for (String op : operators) {
            if (token.equals(op)) {
                return true;
            }
        }
        return false;
    }
}



3rd experiment

import java.util.*;
public class Exp3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Number of productions:");
        int num = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        String[] p = new String[num];
        System.out.println("Enter the grammar as E->E-A:");
        for (int i = 0; i < num; i++) {
            p[i] = scanner.nextLine();
        }
        for (int j = 0; j < num; j++) {
            System.out.println("\nGRAMMAR:" + p[j]);
             char ch1= p[j].charAt(0);
             String lp=p[j].substring(3);
             String spl[] =lp.split("\\|+");
             List<String> beta=new ArrayList<>();
             List<String> alpha=new ArrayList<>();
             for(int i=0;i<spl.length;i++)
             {
            	 if(spl[i].charAt(0)==ch1)
            	 {
            		 alpha.add(spl[i].substring(1));
            	 }
            	 else
            		 beta.add(spl[i]);
             }
             if(alpha.size()==0)
             {
            	 System.out.println(p[j]+" has no left recursion");
            	 continue;
             }
             System.out.println("After removing of left recursion ");
             System.out.print(ch1+"->");
             for(int i=0;i<beta.size();i++)
             {
            	 System.out.print(beta.get(i)+""+ch1+"\'");
            	 if(i<beta.size()-1)
            		 System.out.print("|");
             }
             System.out.println();
             System.out.print(ch1+"\'->");
             for(int i=0;i<alpha.size();i++)
             {
            	 System.out.print(alpha.get(i)+""+ch1+"\'|");
             }
             System.out.println("Îµ");
             }
    }
}




4th experiment



import java.util.*;

public class LeftFactoring {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of productions:");
        int n = sc.nextInt();
        sc.nextLine();
        String[] productions = new String[n];
        System.out.println("Enter the productions:");
        for (int i = 0; i < n; i++) {
            productions[i] = sc.nextLine();
        }
        eliminateLeftFactoring(productions);
    }

    private static void eliminateLeftFactoring(String[] productions) {
        boolean leftFactored = false;
        for (String production : productions) {
            String[] parts = production.split("->");
            String lhs = parts[0].trim();
            String[] rhs = parts[1].split("\\|");
            String prefix = findCommonPrefix(rhs);
            if (!prefix.isEmpty()) {
                leftFactored = true;
                System.out.println(lhs + "->" + prefix + lhs + "'");
                List<String> newRhs = new ArrayList<>();
                for (String r : rhs) {
                    if (r.startsWith(prefix)) {
                        String suffix = r.substring(prefix.length()).trim();
                        if (suffix.isEmpty()) {
                            suffix = "";
                        }
                        newRhs.add(suffix);
                    } else {
                        newRhs.add(r);
                    }
                }
                System.out.println(lhs + "'->" + String.join("|", newRhs));
            }
        }
        if (!leftFactored) {
            System.out.println("Given productions do not have left factoring");
        }
    }

    private static String findCommonPrefix(String[] rhs) {
        String prefix = rhs[0];
        for (int i = 1; i < rhs.length; i++) {
            while (rhs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) {
                    return "";
                }
            }
        }
        return prefix;
    }
}





5th experiment



import java.util.*;
import java.io.*;
public class exp5 {
    static char nonTerminals[], terminals[];
    static int nonTermLen, termLen;
    static String grammar[][], first[], follow[];
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the non-terminals:");
        String nt = br.readLine();
        nonTermLen = nt.length();
        nonTerminals = nt.toCharArray();
        System.out.println("Enter the terminals:");
        String t = br.readLine();
        termLen = t.length();
        terminals = t.toCharArray();
        System.out.println("Specify the grammar (Enter 9 for epsilon production):");
        grammar = new String[nonTermLen][];
        for (int i = 0; i < nonTermLen; i++) {
            System.out.println("Enter the number of productions for " + nonTerminals[i]);
            int n = Integer.parseInt(br.readLine());
            grammar[i] = new String[n];
            System.out.println("Enter the productions:");
            for (int j = 0; j < n; j++)
                grammar[i][j] = br.readLine();
        }
        first = new String[nonTermLen];
        for (int i = 0; i < nonTermLen; i++)
            first[i] = calculateFirst(i);
        System.out.println("First Set:");
        printSets(first);
        follow = new String[nonTermLen];
        for (int i = 0; i < nonTermLen; i++)
            follow[i] = calculateFollow(i);
        System.out.println("Follow Set:");
        printSets(follow);
    }
    static String calculateFirst(int index) {
        String temp = "";
        for (String production: grammar[index]) {
            char firstChar = production.charAt(0);
            if (Character.isLowerCase(firstChar) || firstChar == '9')
                temp += firstChar;
            else
                temp += calculateFirst(getIndex(firstChar));
        }
        return temp;
    }
    static String calculateFollow(int index) {
        String temp = "";
        if (index == 0)
            temp = "$";
        for (int j = 0; j < nonTermLen; j++) {
            for (String production: grammar[j]) {
                for (int k = 0; k < production.length(); k++) {
                    if (production.charAt(k) == nonTerminals[index]) {
                        if (k == production.length() - 1) {
                            if (j < index)
                                temp += follow[j];
                        } else {
                            int nextIndex = getIndex(production.charAt(k + 1));
                            if (nextIndex != -1) {
                                temp += first[nextIndex];
                                if (first[nextIndex].contains("9") && k + 1 == production.length() - 1)
                                    temp += follow[j];
                            } else
                                temp += production.charAt(k + 1);
                        }
                    }
                }
            }
        }
        return temp;
    }
    static void printSets(String[] set) {
        for (String s: set)
            System.out.println(removeDuplicates(s));
    }
    static int getIndex(char c) {
        for (int i = 0; i < nonTermLen; i++) {
            if (nonTerminals[i] == c)
                return i;
        }
        return -1;
    }
    static String removeDuplicates(String str) {
        char[] chars = str.toCharArray();
        Set < Character > charSet = new LinkedHashSet < > ();
        for (char c: chars)
            charSet.add(c);
        StringBuilder sb = new StringBuilder();
        for (Character character: charSet)
            sb.append(character);
        return sb.toString();
    }
}




6th experiment



import java.util.*;
public class expt6 {
static String s = "", st = "";
public static void main(String[] args) {
String[][] tab = {
{"ta", "@", "@", "ta", "@", "@"},
{"@", "+ta", "@", "@", "!", "!"},
{"fb", "@", "@", "fb", "@", "@"},
{"@", "!", "*fb", "@", "!", "!"},
{"i", "@", "@", "(e)", "@", "@"}
};
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the string:\n");
s = scanner.nextLine();
s += "$";
st = "$e";
int st_i = 1, s_i = 0;
StringBuilder temp = new StringBuilder();
System.out.println("\nStack\t\tInput");
while (!st.endsWith("$") || !s.endsWith("$")) {
int s1, s2;
switch (st.charAt(st_i)) {
case 'e':
s1 = 0;
break;
case 'a':
s1 = 1;
break;
case 't':
s1 = 2;
break;
case 'b':
s1 = 3;
break;
case 'f':
s1 = 4;
break;
default:

TITLE: Implementation of Non-Recursive Predictive Parser using C programming

s1 = -1;
}
switch (s.charAt(s_i)) {
case 'i':
s2 = 0;
break;
case '+':
s2 = 1;
break;
case '*':
s2 = 2;
break;
case '(':
s2 = 3;
break;
case ')':
s2 = 4;
break;
case '$':
s2 = 5;
break;
default:
s2 = -1;
}
if (s1 == -1 || s2 == -1) {
System.out.println("Failure");
return;
}
if (tab[s1][s2].equals("@")) {
System.out.println("Failure");
return;
}
if (tab[s1][s2].startsWith("!")) {
st = st.substring(0, st_i);
st_i--;
} else {
temp.setLength(0);
for (int k = tab[s1][s2].length() - 1; k >= 0; k--) {
temp.append(tab[s1][s2].charAt(k));
}
st = st.substring(0, st_i) + temp.toString();
st_i = st.length() - 1;
}
System.out.print(st + "\t\t");
for (int n = s_i; n < s.length(); n++) {
System.out.print(s.charAt(n));
}
System.out.println();
if (st.charAt(st_i) == s.charAt(s_i) && s.charAt(s_i) != '$') {
st = st.substring(0, st_i);
s_i++;
st_i--;
}
}
System.out.println("Success");

}
}





7th experiment


mport java.util.Scanner;

public class ShiftReduceParsing {
    static int k = 0, z = 0, i = 0, j = 0, c = 0;
    static char[] a = new char[16];
    static char[] ac = new char[20];
    static char[] stk = new char[15];
    static char[] act = new char[10];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("GRAMMAR is:\nE->E+E\nE->E*E\nE->(E)\nE->id");
        System.out.println("Enter input string:");
        String input = scanner.nextLine();
        c = input.length();
        a = input.toCharArray();
        System.out.println("stack\t\tinput\t\t\taction");

        for (k = 0, i = 0, j = 0; j < c; k++, i++, j++) {
            if (a[j] == 'i' && a[j + 1] == 'd') {
                stk[i] = a[j];
                stk[i + 1] = a[j + 1];
                stk[i + 2] = '\0';
                a[j] = ' ';
                a[j + 1] = ' ';
                System.out.printf("$%s\t\t%s$\t\t\t%sid\n", new String(stk), new String(a), "\tSHIFT->");
                check();
            } else {
                stk[i] = a[j];
                stk[i + 1] = '\0';
                a[j] = ' ';
                System.out.printf("$%s\t\t%s$\t\t%ssymbols\n", new String(stk), new String(a), "\tSHIFT->");
                check();
            }
        }
    }

    public static void check() {
        String ac = "\t\tREDUCE TO E";
        for (z = 0; z < c; z++) {
            if (stk[z] == 'i' && stk[z + 1] == 'd') {
                stk[z] = 'E';
                stk[z + 1] = '\0';
                System.out.printf("$%s\t\t%s$\t\t%s\n", new String(stk), new String(a), ac);
                j++;
            }
        }
        for (z = 0; z < c; z++) {
            if (stk[z] == 'E' && stk[z + 1] == '+' && stk[z + 2] == 'E') {
                stk[z] = 'E';
                stk[z + 1] = '\0';
                stk[z + 2] = '\0';
                System.out.printf("$%s\t\t%s$\t\t%s\n", new String(stk), new String(a), ac);
                i = i - 2;
            }
        }
        for (z = 0; z < c; z++) {
            if (stk[z] == 'E' && stk[z + 1] == '*' && stk[z + 2] == 'E') {
                stk[z] = 'E';
                stk[z + 1] = '\0';
                stk[z + 2] = '\0';
                System.out.printf("$%s\t\t%s$\t\t%s\n", new String(stk), new String(a), ac);
                i = i - 2;
            }
        }
        for (z = 0; z < c; z++) {
            if (stk[z] == '(' && stk[z + 1] == 'E' && stk[z + 2] == ')') {
                stk[z] = 'E';
                stk[z + 1] = '\0';
                stk[z + 2] = '\0';
                System.out.printf("$%s\t\t%s$\t\t%s\n", new String(stk), new String(a), ac);
                i = i - 2;
            }
        }
    }
}




8th experiment




import java.util.Scanner;

public class Exp8 {
    public static void main(String[] args) {
        char[] stack = new char[20];
        char[] ip = new char[20];
        char[][][] opt = new char[10][10][1];
        char[] ter = new char[10];
        int i, j, k, n, top = 0, col = 0, row = 0;

        Scanner scanner = new Scanner(System.in);

        for (i = 0; i < 10; i++) {
            stack[i] = 0;
            ip[i] = 0;
            for (j = 0; j < 10; j++) {
                opt[i][j][0] = 0;
            }
        }

        System.out.print("Enter the no. of terminals:");
        n = scanner.nextInt();
        System.out.print("\nEnter the terminals:");
        ter = scanner.next().toCharArray();

        System.out.println("\nEnter the table values:");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                System.out.printf("\nEnter the value for %c %c:", ter[i], ter[j]);
                opt[i][j] = scanner.next().toCharArray();
            }
        }

        System.out.println("\nOPERATOR PRECEDENCE TABLE:");
        for (i = 0; i < n; i++) {
            System.out.print("\t" + ter[i]);
        }
        System.out.println();

        for (i = 0; i < n; i++) {
            System.out.println();
            System.out.print(ter[i]);
            for (j = 0; j < n; j++) {
                System.out.print("\t" + opt[i][j][0]);
            }
        }

        stack[top] = '$';
        System.out.print("\nEnter the input string:");
        String input = scanner.next();
        ip = input.toCharArray();
        i = 0;
        System.out.println("\nSTACK\t\t\tINPUT STRING\t\t\tACTION");
        System.out.print("\n" + String.valueOf(stack) + "\t" + input + "\t\t");
        while (i <= input.length()) {
            for (k = 0; k < n; k++) {
                if (stack[top] == ter[k])
                    col = k;
                if (ip[i] == ter[k])
                    row = k;
            }

            if ((stack[top] == '$') && (ip[i] == '$')) {
                System.out.println("String is accepted");
                break;
            } else if ((opt[col][row][0] == '<') || (opt[col][row][0] == '=')) {
                stack[++top] = opt[col][row][0];
                stack[++top] = ip[i];
                System.out.println("Shift " + ip[i]);
                i++;
            } else {
                if (opt[col][row][0] == '>') {
                    while (stack[top] != '<') {
                        --top;
                    }
                    top = top - 1;
                    System.out.println("Reduce");
                } else {
                    System.out.println("\nString is not accepted");
                    break;
                }
            }
            System.out.println();
            for (k = 0; k <= top; k++) {
                System.out.print(stack[k]);
            }
            System.out.print("\t\t\t");
            for (k = i; k < input.length(); k++) {
                System.out.print(ip[k]);
            }
            System.out.print("\t\t\t");
        }
    }
}





9 th experiment




import java.util.Scanner;

public class Exp9 {
    static int[] stack;
    static int top, n;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        top = -1;

        System.out.println("Enter the size of stack[MAX=100]: ");
        n = scanner.nextInt();

        if (n <= 0) {
            System.out.println("Invalid stack size.");
            return;
        }

        stack = new int[n];

        System.out.println("\n\tStack Operations:");
        System.out.println("\t--------------------------");
        System.out.println("\t1. Push");
        System.out.println("\t2. Pop");
        System.out.println("\t3. Display");
        System.out.println("\t4. EXIT");

        int choice;
        do {
            System.out.println("\nEnter your choice: ");
            choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    push(scanner);
                    break;
                case 2:
                    pop();
                    break;
                case 3:
                    display();
                    break;
                case 4:
                    System.out.println("\nEXIT");
                    break;
                default:
                    System.out.println("Please enter a valid choice.");
            }
        } while (choice != 4);

        scanner.close();
    }

    static void push(Scanner scanner) {
        if (top >= n - 1) {
            System.out.println("\nStack overflow");
        } else {
            System.out.println("Enter a value to be pushed: ");
            int x = scanner.nextInt();
            top++;
            stack[top] = x;
        }
    }

    static void pop() {
        if (top == -1)
            System.out.println("\nStack underflow");
        else {
            System.out.println("\nThe popped element is " + stack[top]);
            top--;
        }
    }

    static void display() {
        if (top >= 0) {
            System.out.println("\nThe elements in the stack are:");
            for (int i = top; i >= 0; i--)
                System.out.println(stack[i]);
            System.out.println("\nSelect next choice");
        } else
            System.out.println("\nThe stack is empty.");
    }
}



10 th experiment



import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

class Instruction {
    String op;    
    String arg1; 
    String arg2;  
    String result;
    Instruction(String op, String arg1, String arg2, String result) {
        this.op = op;
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.result = result;
    }
    @Override
    public String toString() {
        return result + " = " + arg1 + " " + op + " " + arg2;
    }
}

class IntermediateCodeGenerator {
    private List<Instruction> instructions;
    private Stack<String> operands;
    private int tempCount;

    IntermediateCodeGenerator() {
        instructions = new ArrayList<>();
        operands = new Stack<>();
        tempCount = 0;
    }

    public List<Instruction> generate(String expression) {
        Stack<Character> operators = new Stack<>();
        StringBuilder operand = new StringBuilder();

        for (int i = 0; i < expression.length(); i++) {
            char token = expression.charAt(i);

            if (Character.isWhitespace(token)) {
                continue;
            }

            if (Character.isLetterOrDigit(token)) {
                operand.append(token);
                if (i == expression.length() - 1 || !Character.isLetterOrDigit(expression.charAt(i + 1))) {
                    operands.push(operand.toString());
                    operand.setLength(0);
                }
            } else if (token == '(') {
                operators.push(token);
            } else if (token == ')') {
                while (!operators.isEmpty() && operators.peek() != '(') {
                    processOperator(operators.pop());
                }
                operators.pop();
            } else if (isOperator(token)) {
                while (!operators.isEmpty() && precedence(token) <= precedence(operators.peek())) {
                    processOperator(operators.pop());
                }
                operators.push(token);
            }
        }

        while (!operators.isEmpty()) {
            processOperator(operators.pop());
        }

        return instructions;
    }

    private void processOperator(char operator) {
        String operand2 = operands.pop();
        String operand1 = operands.pop();
        String result = newTemp();
        instructions.add(new Instruction(String.valueOf(operator), operand1, operand2, result));
        operands.push(result);
    }

    private String newTemp() {
        return "t" + tempCount++;
    }

    private boolean isOperator(char token) {
        return token == '+' || token == '-' || token == '*' || token == '/';
    }

    private int precedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return -1;
        }
    }
}

public class exp10 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter an arithmetic expression:");
        String expression = scanner.nextLine();

        IntermediateCodeGenerator icg = new IntermediateCodeGenerator();
        List<Instruction> code = icg.generate(expression);

        System.out.println("Intermediate Code:");
        for (Instruction instr : code) {
            System.out.println(instr);
        }

        scanner.close();
    }
}